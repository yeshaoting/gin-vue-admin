version: "3"

# 声明一个名为network的networks,subnet为network的子网地址,默认网关是177.7.0.1
networks:
 network:
   ipam:
     driver: default
     config:
       - subnet: '177.7.0.0/16'

# 设置mysql，redis持久化保存
volumes:
  mysql:
  redis:

services:
  web:
    image: node:20
    container_name: gva-web-test
    hostname: gva-web-test           #可以通过容器名访问
    restart: always
    ports:
      - '8181:8080'
    depends_on:
      - server
    working_dir: /web       # 如果docker 设置了workdir 则此处不需要设置
    #若网络不太好，请自行换源，如下
    command: bash -c "yarn config set registry https://registry.npmmirror.com --global && yarn dev"
    #command: bash -c "yarn dev"
    volumes:
      - ../../web:/web
    networks:
      network:
        ipv4_address: 177.7.0.11

  server:
    image: golang:1.22
    container_name: gva-server-test
    hostname: gva-server-test
    restart: always
    ports:
      - '8282:8888'
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../server:/server
    working_dir: /server    # 如果docker 设置了workdir 则此处不需要设置 
    command: bash -c "go env -w GOPROXY=https://goproxy.cn,direct && go mod tidy && go run main.go"
    environment:
      GIN_MODE: test
    links:
      - mysql
      - redis
    networks:
      network:
        ipv4_address: 177.7.0.12

  mysql:
    image: mysql:8.0.21    # 如果您是 arm64 架构：如 MacOS 的 M1，请修改镜像为 image: mysql/mysql-server:8.0.21
    container_name: gva-mysql-test
    hostname: gva-mysql-test
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci #设置utf8字符集
    restart: always
    ports:
      - "3306:3306"  # host物理直接映射端口为3306
    environment:
      MYSQL_ROOT_PASSWORD: 'root' # root管理员用户密码
      MYSQL_DATABASE: 'web-manager' # 初始化启动时要创建的数据库的名称
      MYSQL_USER: 'admin'
      MYSQL_PASSWORD: 'admin'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "admin", "-padmin"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - mysql:/var/lib/mysql
    networks:
      network:
        ipv4_address: 177.7.0.13

  redis:
    image: redis:6.0.6
    container_name: gva-redis-test # 容器名
    hostname: gva-redis-test
    restart: always
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis:/data
    networks:
      network:
        ipv4_address: 177.7.0.14
